{
  "platform": "readthedocs",
  "total_pages": 9,
  "analysis": {
    "total_pages": 9,
    "sections": {
      "Howto": 1,
      "Tutorial": 1,
      "C Api": 1,
      "Whatsnew": 1,
      "Faq": 1,
      "Reference": 1
    },
    "tags": {
      "api": 7,
      "tutorial": 4,
      "reference": 7,
      "installation": 4,
      "backend": 8,
      "authentication": 2,
      "database": 1
    },
    "programming_languages": {},
    "total_code_examples": 0,
    "total_api_endpoints": 0,
    "avg_content_length": 4778.333333333333
  },
  "scraped_at": "2025-07-25 12:46:57",
  "pages": [
    {
      "url": "https://docs.python.org/",
      "title": "Python 3.13.5 documentation",
      "content": "Python 3.13.5 documentation\nWelcome! This is the official documentation for Python 3.13.5.\nDocumentation sections:\nWhat's new in Python 3.13?\nOr\nall \"What's new\" documents since Python 2.0\nTutorial\nStart here: a tour of Python's syntax and features\nLibrary reference\nStandard library and builtins\nLanguage reference\nSyntax and language elements\nPython setup and usage\nHow to install, configure, and use Python\nPython HOWTOs\nIn-depth topic manuals\nInstalling Python modules\nThird-party modules and PyPI.org\nDistributing Python modules\nPublishing modules for use by other people\nExtending and embedding\nFor C/C++ programmers\nPython's C API\nC API reference\nFAQs\nFrequently asked questions (with answers!)\nDeprecations\nDeprecated functionality\nIndices, glossary, and search:\nGlobal module index\nAll modules and libraries\nGeneral index\nAll functions, classes, and terms\nGlossary\nTerms explained\nSearch page\nSearch this documentation\nComplete table of contents\nLists all sections and subsections\nProject information:\nReporting issues\nContributing to docs\nDownload the documentation\nHistory and license of Python\nCopyright\nAbout the documentation",
      "section": null,
      "subsection": null,
      "api_endpoints": [],
      "code_examples": [],
      "last_updated": null,
      "tags": [
        "api",
        "tutorial",
        "reference",
        "installation",
        "backend"
      ],
      "scraped_at": "2025-07-25 12:46:45"
    },
    {
      "url": "https://docs.python.org/py-modindex.html",
      "title": "Python Module Index",
      "content": "Python Module Index\n_\n|\na\n|\nb\n|\nc\n|\nd\n|\ne\n|\nf\n|\ng\n|\nh\n|\ni\n|\nj\n|\nk\n|\nl\n|\nm\n|\nn\n|\no\n|\np\n|\nq\n|\nr\n|\ns\n|\nt\n|\nu\n|\nv\n|\nw\n|\nx\n|\nz\n_\n__future__\nFuture statement definitions\n__main__\nThe environment where top-level code is run. Covers command-line\ninterfaces, import-time behavior, and ``__name__ == '__main__'``.\n_thread\nLow-level threading API.\n_tkinter\nA binary module that contains the low-level interface to Tcl/Tk.\na\nabc\nAbstract base classes according to :pep:`3119`.\naifc\nDeprecated:\nRemoved in 3.13.\nargparse\nCommand-line option and argument parsing library.\narray\nSpace efficient arrays of uniformly typed numeric values.\nast\nAbstract Syntax Tree classes and manipulation.\nasynchat\nDeprecated:\nRemoved in 3.12.\nasyncio\nAsynchronous I/O.\nasyncore\nDeprecated:\nRemoved in 3.12.\natexit\nRegister and execute cleanup functions.\naudioop\nDeprecated:\nRemoved in 3.13.\nb\nbase64\nRFC 4648: Base16, Base32, Base64 Data Encodings;\nBase85 and Ascii85\nbdb\nDebugger framework.\nbinascii\nTools for converting between binary and various ASCII-encoded binary\nrepresentations.\nbisect\nArray bisection algorithms for binary searching.\nbuiltins\nThe module that provides the built-in namespace.\nbz2\nInterfaces for bzip2 compression and decompression.\nc\ncalendar\nFunctions for working with calendars, including some emulation\nof the Unix cal program.\ncgi\nDeprecated:\nRemoved in 3.13.\ncgitb\nDeprecated:\nRemoved in 3.13.\nchunk\nDeprecated:\nRemoved in 3.13.\ncmath\nMathematical functions for complex numbers.\ncmd\nBuild line-oriented command interpreters.\ncode\nFacilities to implement read-eval-print loops.\ncodecs\nEncode and decode data and streams.\ncodeop\nCompile (possibly incomplete) Python code.\ncollections\nContainer datatypes\ncollections.abc\nAbstract base classes for containers\ncolorsys\nConversion functions between RGB and other color systems.\ncompileall\nTools for byte-compiling all Python source files in a directory tree.\nconcurrent\nconcurrent.futures\nExecute computations concurrently using threads or processes.\nconfigparser\nConfiguration file parser.\ncontextlib\nUtilities for with-statement contexts.\ncontextvars\nContext Variables\ncopy\nShallow and deep copy operations.\ncopyreg\nRegister pickle support functions.\ncProfile\ncrypt\nDeprecated:\nRemoved in 3.13.\ncsv\nWrite and read tabular data to and from delimited files.\nctypes\nA foreign function library for Python.\ncurses\n(Unix)\nAn interface to the curses library, providing portable\nterminal handling.\ncurses.ascii\nConstants and set-membership functions for ASCII characters.\ncurses.panel\nA panel stack extension that adds depth to  curses windows.\ncurses.textpad\nEmacs-like input editing in a curses window.\nd\ndataclasses\nGenerate special methods on user-defined classes.\ndatetime\nBasic date and time types.\ndbm\nInterfaces to various Unix \"database\" formats.\ndbm.dumb\nPortable implementation of the simple DBM interface.\ndbm.gnu\n(Unix)\nGNU database manager\ndbm.ndbm\n(Unix)\nThe New Database Manager\ndbm.sqlite3\n(All)\nSQLite backend for dbm\ndecimal\nImplementation of the General Decimal Arithmetic Specification.\ndifflib\nHelpers for computing differences between objects.\ndis\nDisassembler for Python bytecode.\ndistutils\nDeprecated:\nRemoved in 3.12.\ndoctest\nTest pieces of code within docstrings.\ne\nemail\nPackage supporting the parsing, manipulating, and generating\nemail messages.\nemail.charset\nCharacter Sets\nemail.contentmanager\nStoring and Retrieving Content from MIME Parts\nemail.encoders\nEncoders for email message payloads.\nemail.errors\nThe exception classes used by the email package.\nemail.generator\nGenerate flat text email messages from a message structure.\nemail.header\nRepresenting non-ASCII headers\nemail.headerregistry\nAutomatic Parsing of headers based on the field name\nemail.iterators\nIterate over a  message object tree.\nemail.message\nThe base class representing email messages.\nemail.mime\nBuild MIME messages.\nemail.mime.application\nemail.mime.audio\nemail.mime.base\nemail.mime.image\nemail.mime.message\nemail.mime.multipart\nemail.mime.nonmultipart\nemail.mime.text\nemail.parser\nParse flat text email messages to produce a message object structure.\nemail.policy\nControlling the parsing and generating of messages\nemail.utils\nMiscellaneous email package utilities.\nencodings\nEncodings package\nencodings.idna\nInternationalized Domain Names implementation\nencodings.mbcs\nWindows ANSI codepage\nencodings.utf_8_sig\nUTF-8 codec with BOM signature\nensurepip\nBootstrapping the \"pip\" installer into an existing Python\ninstallation or virtual environment.\nenum\nImplementation of an enumeration class.\nerrno\nStandard errno system symbols.\nf\nfaulthandler\nDump the Python traceback.\nfcntl\n(Unix)\nThe fcntl() and ioctl() system calls.\nfilecmp\nCompare files efficiently.\nfileinput\nLoop over standard input or a list of files.\nfnmatch\nUnix shell style filename pattern matching.\nfractions\nRational numbers.\nftplib\nFTP protocol client (requires sockets).\nfunctools\nHigher-order functions and operations on callable objects.\ng\ngc\nInterface to the cycle-detecting garbage collector.\ngetopt\nPortable parser for command line options; support both short and\nlong option names.\ngetpass\nPortable reading of passwords and retrieval of the userid.\ngettext\nMultilingual internationalization services.\nglob\nUnix shell style pathname pattern expansion.\ngraphlib\nFunctionality to operate with graph-like structures\ngrp\n(Unix)\nThe group database (getgrnam() and friends).\ngzip\nInterfaces for gzip compression and decompression using file objects.\nh\nhashlib\nSecure hash and message digest algorithms.\nheapq\nHeap queue algorithm (a.k.a. priority queue).\nhmac\nKeyed-Hashing for Message Authentication (HMAC) implementation\nhtml\nHelpers for manipulating HTML.\nhtml.entities\nDefinitions of HTML general entities.\nhtml.parser\nA simple parser that can handle HTML and XHTML.\nhttp\nHTTP status codes and messages\nhttp.client\nHTTP and HTTPS protocol client (requires sockets).\nhttp.cookiejar\nClasses for automatic handling of HTTP cookies.\nhttp.cookies\nSupport for HTTP state management (cookies).\nhttp.server\nHTTP server and request handlers.\ni\nidlelib\nImplementation package for the IDLE shell/editor.\nimaplib\nIMAP4 protocol client (requires sockets).\nimghdr\nDeprecated:\nRemoved in 3.13.\nimp\nDeprecated:\nRemoved in 3.12.\nimportlib\nThe implementation of the import machinery.\nimportlib.abc\nAbstract base classes related to import\nimportlib.machinery\nImporters and path hooks\nimportlib.metadata\nAccessing package metadata\nimportlib.resources\nPackage resource reading, opening, and access\nimportlib.resources.abc\nAbstract base classes for resources\nimportlib.util\nUtility code for importers\ninspect\nExtract information and source code from live objects.\nio\nCore tools for working with streams.\nipaddress\nIPv4/IPv6 manipulation library.\nitertools\nFunctions creating iterators for efficient looping.\nj\njson\nEncode and decode the JSON format.\njson.tool\nA command line to validate and pretty-print JSON.\nk\nkeyword\nTest whether a string is a keyword in Python.\nl\nlinecache\nProvides random access to individual lines from text files.\nlocale\nInternationalization services.\nlogging\nFlexible event logging system for applications.\nlogging.config\nConfiguration of the logging module.\nlogging.handlers\nHandlers for the logging module.\nlzma\nA Python wrapper for the liblzma compression library.\nm\nmailbox\nManipulate mailboxes in various formats\nmailcap\nDeprecated:\nRemoved in 3.13.\nmarshal\nConvert Python objects to streams of bytes and back (with different\nconstraints).\nmath\nMathematical functions (sin() etc.).\nmimetypes\nMapping of filename extensions to MIME types.\nmmap\nInterface to memory-mapped files for Unix and Windows.\nmodulefinder\nFind modules used by a script.\nmsilib\nDeprecated:\nRemoved in 3.13.\nmsvcrt\n(Windows)\nMiscellaneous useful routines from the MS VC++ runtime.\nmultiprocessing\nProcess-based parallelism.\nmultiprocessing.connection\nAPI for dealing with sockets.\nmultiprocessing.dummy\nDumb wrapper around threading.\nmultiprocessing.managers\nShare data between process with shared objects.\nmultiprocessing.pool\nCreate pools of processes.\nmultiprocessing.shared_memory\nProvides shared memory for direct access across processes.\nmultiprocessing.sharedctypes\nAllocate ctypes objects from shared memory.\nn\nnetrc\nLoading of .netrc files.\nnis\nDeprecated:\nRemoved in 3.13.\nnntplib\nDeprecated:\nRemoved in 3.13.\nnumbers\nNumeric abstract base classes (Complex, Real, Integral, etc.).\no\noperator\nFunctions corresponding to the standard operators.\noptparse\nCommand-line option parsing library.\nos\nMiscellaneous operating system interfaces.\nos.path\nOperations on pathnames.\nossaudiodev\nDeprecated:\nRemoved in 3.13.\np\npathlib\nObject-oriented filesystem paths\npdb\nThe Python debugger for interactive interpreters.\npickle\nConvert Python objects to streams of bytes and back.\npickletools\nContains extensive comments about the pickle protocols and\npickle-machine opcodes, as well as some useful functions.\npipes\nDeprecated:\nRemoved in 3.13.\npkgutil\nUtilities for the import system.\nplatform\nRetrieves as much platform identifying data as possible.\nplistlib\nGenerate and parse Apple plist files.\npoplib\nPOP3 protocol client (requires sockets).\nposix\n(Unix)\nThe most common POSIX system calls (normally used via module os).\npprint\nData pretty printer.\nprofile\nPython source profiler.\npstats\nStatistics object for use with the profiler.\npty\n(Unix)\nPseudo-Terminal Handling for Unix.\npwd\n(Unix)\nThe password database (getpwnam() and friends).\npy_compile\nGenerate byte-code files from Python source files.\npyclbr\nSupports information extraction for a Python module browser.\npydoc\nDocumentation generator and online help system.\nq\nqueue\nA synchronized queue class.\nquopri\nEncode and decode files using the MIME quoted-printable encoding.\nr\nrandom\nGenerate pseudo-random numbers with various common distributions.\nre\nRegular expression operations.\nreadline\n(Unix)\nGNU readline support for Python.\nreprlib\nAlternate repr() implementation with size limits.\nresource\n(Unix)\nAn interface to provide resource usage information on the current process.\nrlcompleter\nPython identifier completion, suitable for the GNU readline library.\nrunpy\nLocate and run Python modules without importing them first.\ns\nsched\nGeneral purpose event scheduler.\nsecrets\nGenerate secure random numbers for managing secrets.\nselect\nWait for I/O completion on multiple streams.\nselectors\nHigh-level I/O multiplexing.\nshelve\nPython object persistence.\nshlex\nSimple lexical analysis for Unix shell-like languages.\nshutil\nHigh-level file operations, including copying.\nsignal\nSet handlers for asynchronous events.\nsite\nModule responsible for site-specific configuration.\nsitecustomize\nsmtpd\nDeprecated:\nRemoved in 3.12.\nsmtplib\nSMTP protocol client (requires sockets).\nsndhdr\nDeprecated:\nRemoved in 3.13.\nsocket\nLow-level networking interface.\nsocketserver\nA framework for network servers.\nspwd\nDeprecated:\nRemoved in 3.13.\nsqlite3\nA DB-API 2.0 implementation using SQLite 3.x.\nssl\nTLS/SSL wrapper for socket objects\nstat\nUtilities for interpreting the results of os.stat(),\nos.lstat() and os.fstat().\nstatistics\nMathematical statistics functions\nstring\nCommon string operations.\nstringprep\nString preparation, as per RFC 3453\nstruct\nInterpret bytes as packed binary data.\nsubprocess\nSubprocess management.\nsunau\nDeprecated:\nRemoved in 3.13.\nsymtable\nInterface to the compiler's internal symbol tables.\nsys\nAccess system-specific parameters and functions.\nsys.monitoring\nAccess and control event monitoring\nsysconfig\nPython's configuration information\nsyslog\n(Unix)\nAn interface to the Unix syslog library routines.\nt\ntabnanny\nTool for detecting white space related problems in Python\nsource files in a directory tree.\ntarfile\nRead and write tar-format archive files.\ntelnetlib\nDeprecated:\nRemoved in 3.13.\ntempfile\nGenerate temporary files and directories.\ntermios\n(Unix)\nPOSIX style tty control.\ntest\nRegression tests package containing the testing suite for Python.\ntest.regrtest\nDrives the regression test suite.\ntest.support\nSupport for Python's regression test suite.\ntest.support.bytecode_helper\nSupport tools for testing correct bytecode generation.\ntest.support.import_helper\nSupport for import tests.\ntest.support.os_helper\nSupport for os tests.\ntest.support.script_helper\nSupport for Python's script execution tests.\ntest.support.socket_helper\nSupport for socket tests.\ntest.support.threading_helper\nSupport for threading tests.\ntest.support.warnings_helper\nSupport for warnings tests.\ntextwrap\nText wrapping and filling\nthreading\nThread-based parallelism.\ntime\nTime access and conversions.\ntimeit\nMeasure the execution time of small code snippets.\ntkinter\nInterface to Tcl/Tk for graphical user interfaces\ntkinter.colorchooser\n(Tk)\nColor choosing dialog\ntkinter.commondialog\n(Tk)\nTkinter base class for dialogs\ntkinter.dnd\n(Tk)\nTkinter drag-and-drop interface\ntkinter.filedialog\n(Tk)\nDialog classes for file selection\ntkinter.font\n(Tk)\nTkinter font-wrapping class\ntkinter.messagebox\n(Tk)\nVarious types of alert dialogs\ntkinter.scrolledtext\n(Tk)\nText widget with a vertical scroll bar.\ntkinter.simpledialog\n(Tk)\nSimple dialog windows\ntkinter.ttk\nTk themed widget set\ntoken\nConstants representing terminal nodes of the parse tree.\ntokenize\nLexical scanner for Python source code.\ntomllib\nParse TOML files.\ntrace\nTrace or track Python statement execution.\ntraceback\nPrint or retrieve a stack traceback.\ntracemalloc\nTrace memory allocations.\ntty\n(Unix)\nUtility functions that perform common terminal control operations.\nturtle\nAn educational framework for simple graphics applications\nturtledemo\nA viewer for example turtle scripts\ntypes\nNames for built-in types.\ntyping\nSupport for type hints (see :pep:`484`).\nu\nunicodedata\nAccess the Unicode Database.\nunittest\nUnit testing framework for Python.\nunittest.mock\nMock object library.\nurllib\nurllib.error\nException classes raised by urllib.request.\nurllib.parse\nParse URLs into or assemble them from components.\nurllib.request\nExtensible library for opening URLs.\nurllib.response\nResponse classes used by urllib.\nurllib.robotparser\nLoad a robots.txt file and answer questions about\nfetchability of other URLs.\nusercustomize\nuu\nDeprecated:\nRemoved in 3.13.\nuuid\nUUID objects (universally unique identifiers) according to RFC 4122\nv\nvenv\nCreation of virtual environments.\nw\nwarnings\nIssue warning messages and control their disposition.\nwave\nProvide an interface to the WAV sound format.\nweakref\nSupport for weak references and weak dictionaries.\nwebbrowser\nEasy-to-use controller for web browsers.\nwinreg\n(Windows)\nRoutines and objects for manipulating the Windows registry.\nwinsound\n(Windows)\nAccess to the sound-playing machinery for Windows.\nwsgiref\nWSGI Utilities and Reference Implementation.\nwsgiref.handlers\nWSGI server/gateway base classes.\nwsgiref.headers\nWSGI response header tools.\nwsgiref.simple_server\nA simple WSGI HTTP server.\nwsgiref.types\nWSGI types for static type checking\nwsgiref.util\nWSGI environment utilities.\nwsgiref.validate\nWSGI conformance checker.\nx\nxdrlib\nDeprecated:\nRemoved in 3.13.\nxml\nPackage containing XML processing modules\nxml.dom\nDocument Object Model API for Python.\nxml.dom.minidom\nMinimal Document Object Model (DOM) implementation.\nxml.dom.pulldom\nSupport for building partial DOM trees from SAX events.\nxml.etree.ElementInclude\nxml.etree.ElementTree\nImplementation of the ElementTree API.\nxml.parsers.expat\nAn interface to the Expat non-validating XML parser.\nxml.parsers.expat.errors\nxml.parsers.expat.model\nxml.sax\nPackage containing SAX2 base classes and convenience functions.\nxml.sax.handler\nBase classes for SAX event handlers.\nxml.sax.saxutils\nConvenience functions and classes for use with SAX.\nxml.sax.xmlreader\nInterface which SAX-compliant XML parsers must implement.\nxmlrpc\nServer and client modules implementing XML-RPC.\nxmlrpc.client\nXML-RPC client access.\nxmlrpc.server\nBasic XML-RPC server implementations.\nz\nzipapp\nManage executable Python zip archives\nzipfile\nRead and write ZIP-format archive files.\nzipimport\nSupport for importing Python modules from ZIP archives.\nzlib\nLow-level interface to compression and decompression routines\ncompatible with gzip.\nzoneinfo\nIANA time zone support",
      "section": null,
      "subsection": null,
      "api_endpoints": [],
      "code_examples": [],
      "last_updated": null,
      "tags": [
        "api",
        "reference",
        "installation",
        "authentication",
        "database",
        "backend"
      ],
      "scraped_at": "2025-07-25 12:46:47"
    },
    {
      "url": "https://docs.python.org/howto/index.html",
      "title": "Python HOWTOs\u00b6",
      "content": "Python HOWTOs\n\u00b6\nPython HOWTOs are documents that cover a specific topic in-depth.\nModeled on the Linux Documentation Project\u2019s HOWTO collection, this collection is an\neffort to foster documentation that\u2019s more detailed than the\nPython Library Reference.\nGeneral:\nAnnotations Best Practices\nArgparse Tutorial\nDescriptor Guide\nEnum HOWTO\nFunctional Programming HOWTO\nAn introduction to the ipaddress module\nLogging HOWTO\nLogging Cookbook\nRegular Expression HOWTO\nSorting Techniques\nUnicode HOWTO\nHOWTO Fetch Internet Resources Using The urllib Package\nAdvanced development:\nCurses Programming with Python\nPython experimental support for free threading\nC API Extension Support for Free Threading\nIsolating Extension Modules\nThe Python 2.3 Method Resolution Order\nSocket Programming HOWTO\ntimer file descriptor HOWTO\nPorting Extension Modules to Python 3\nDebugging and profiling:\nDebugging C API extensions and CPython Internals with GDB\nInstrumenting CPython with DTrace and SystemTap\nPython support for the Linux perf profiler",
      "section": "Howto",
      "subsection": null,
      "api_endpoints": [],
      "code_examples": [],
      "last_updated": null,
      "tags": [
        "api",
        "tutorial",
        "reference",
        "backend"
      ],
      "scraped_at": "2025-07-25 12:46:48"
    },
    {
      "url": "https://docs.python.org/tutorial/index.html",
      "title": "The Python Tutorial\u00b6",
      "content": "The Python Tutorial\n\u00b6\nTip\nThis tutorial is designed for\nprogrammers\nthat are new to the Python language,\nnot\nbeginners\nwho are new to programming.\nPython is an easy to learn, powerful programming language. It has efficient\nhigh-level data structures and a simple but effective approach to\nobject-oriented programming. Python\u2019s elegant syntax and dynamic typing,\ntogether with its interpreted nature, make it an ideal language for scripting\nand rapid application development in many areas on most platforms.\nThe Python interpreter and the extensive standard library are freely available\nin source or binary form for all major platforms from the Python web site,\nhttps://www.python.org/\n, and may be freely distributed. The same site also\ncontains distributions of and pointers to many free third party Python modules,\nprograms and tools, and additional documentation.\nThe Python interpreter is easily extended with new functions and data types\nimplemented in C or C++ (or other languages callable from C). Python is also\nsuitable as an extension language for customizable applications.\nThis tutorial introduces the reader informally to the basic concepts and\nfeatures of the Python language and system. Be aware that it expects you to\nhave a basic understanding of programming in general. It helps to have a Python\ninterpreter handy for hands-on experience, but all examples are self-contained,\nso the tutorial can be read off-line as well.\nFor a description of standard objects and modules, see\nThe Python Standard Library\n.\nThe Python Language Reference\ngives a more formal definition of the language.  To write\nextensions in C or C++, read\nExtending and Embedding the Python Interpreter\nand\nPython/C API Reference Manual\n. There are also several books covering Python in depth.\nThis tutorial does not attempt to be comprehensive and cover every single\nfeature, or even every commonly used feature. Instead, it introduces many of\nPython\u2019s most noteworthy features, and will give you a good idea of the\nlanguage\u2019s flavor and style. After reading it, you will be able to read and\nwrite Python modules and programs, and you will be ready to learn more about the\nvarious Python library modules described in\nThe Python Standard Library\n.\nThe\nGlossary\nis also worth going through.\n1. Whetting Your Appetite\n2. Using the Python Interpreter\n2.1. Invoking the Interpreter\n2.1.1. Argument Passing\n2.1.2. Interactive Mode\n2.2. The Interpreter and Its Environment\n2.2.1. Source Code Encoding\n3. An Informal Introduction to Python\n3.1. Using Python as a Calculator\n3.1.1. Numbers\n3.1.2. Text\n3.1.3. Lists\n3.2. First Steps Towards Programming\n4. More Control Flow Tools\n4.1.\nif\nStatements\n4.2.\nfor\nStatements\n4.3. The\nrange()\nFunction\n4.4.\nbreak\nand\ncontinue\nStatements\n4.5.\nelse\nClauses on Loops\n4.6.\npass\nStatements\n4.7.\nmatch\nStatements\n4.8. Defining Functions\n4.9. More on Defining Functions\n4.9.1. Default Argument Values\n4.9.2. Keyword Arguments\n4.9.3. Special parameters\n4.9.3.1. Positional-or-Keyword Arguments\n4.9.3.2. Positional-Only Parameters\n4.9.3.3. Keyword-Only Arguments\n4.9.3.4. Function Examples\n4.9.3.5. Recap\n4.9.4. Arbitrary Argument Lists\n4.9.5. Unpacking Argument Lists\n4.9.6. Lambda Expressions\n4.9.7. Documentation Strings\n4.9.8. Function Annotations\n4.10. Intermezzo: Coding Style\n5. Data Structures\n5.1. More on Lists\n5.1.1. Using Lists as Stacks\n5.1.2. Using Lists as Queues\n5.1.3. List Comprehensions\n5.1.4. Nested List Comprehensions\n5.2. The\ndel\nstatement\n5.3. Tuples and Sequences\n5.4. Sets\n5.5. Dictionaries\n5.6. Looping Techniques\n5.7. More on Conditions\n5.8. Comparing Sequences and Other Types\n6. Modules\n6.1. More on Modules\n6.1.1. Executing modules as scripts\n6.1.2. The Module Search Path\n6.1.3. \u201cCompiled\u201d Python files\n6.2. Standard Modules\n6.3. The\ndir()\nFunction\n6.4. Packages\n6.4.1. Importing * From a Package\n6.4.2. Intra-package References\n6.4.3. Packages in Multiple Directories\n7. Input and Output\n7.1. Fancier Output Formatting\n7.1.1. Formatted String Literals\n7.1.2. The String format() Method\n7.1.3. Manual String Formatting\n7.1.4. Old string formatting\n7.2. Reading and Writing Files\n7.2.1. Methods of File Objects\n7.2.2. Saving structured data with\njson\n8. Errors and Exceptions\n8.1. Syntax Errors\n8.2. Exceptions\n8.3. Handling Exceptions\n8.4. Raising Exceptions\n8.5. Exception Chaining\n8.6. User-defined Exceptions\n8.7. Defining Clean-up Actions\n8.8. Predefined Clean-up Actions\n8.9. Raising and Handling Multiple Unrelated Exceptions\n8.10. Enriching Exceptions with Notes\n9. Classes\n9.1. A Word About Names and Objects\n9.2. Python Scopes and Namespaces\n9.2.1. Scopes and Namespaces Example\n9.3. A First Look at Classes\n9.3.1. Class Definition Syntax\n9.3.2. Class Objects\n9.3.3. Instance Objects\n9.3.4. Method Objects\n9.3.5. Class and Instance Variables\n9.4. Random Remarks\n9.5. Inheritance\n9.5.1. Multiple Inheritance\n9.6. Private Variables\n9.7. Odds and Ends\n9.8. Iterators\n9.9. Generators\n9.10. Generator Expressions\n10. Brief Tour of the Standard Library\n10.1. Operating System Interface\n10.2. File Wildcards\n10.3. Command Line Arguments\n10.4. Error Output Redirection and Program Termination\n10.5. String Pattern Matching\n10.6. Mathematics\n10.7. Internet Access\n10.8. Dates and Times\n10.9. Data Compression\n10.10. Performance Measurement\n10.11. Quality Control\n10.12. Batteries Included\n11. Brief Tour of the Standard Library \u2014 Part II\n11.1. Output Formatting\n11.2. Templating\n11.3. Working with Binary Data Record Layouts\n11.4. Multi-threading\n11.5. Logging\n11.6. Weak References\n11.7. Tools for Working with Lists\n11.8. Decimal Floating-Point Arithmetic\n12. Virtual Environments and Packages\n12.1. Introduction\n12.2. Creating Virtual Environments\n12.3. Managing Packages with pip\n13. What Now?\n14. Interactive Input Editing and History Substitution\n14.1. Tab Completion and History Editing\n14.2. Alternatives to the Interactive Interpreter\n15. Floating-Point Arithmetic:  Issues and Limitations\n15.1. Representation Error\n16. Appendix\n16.1. Interactive Mode\n16.1.1. Error Handling\n16.1.2. Executable Python Scripts\n16.1.3. The Interactive Startup File\n16.1.4. The Customization Modules",
      "section": "Tutorial",
      "subsection": null,
      "api_endpoints": [],
      "code_examples": [],
      "last_updated": null,
      "tags": [
        "api",
        "tutorial",
        "reference",
        "backend"
      ],
      "scraped_at": "2025-07-25 12:46:49"
    },
    {
      "url": "https://docs.python.org/genindex.html",
      "title": "Index",
      "content": "Index\nIndex pages by letter:\nSymbols\n|\n_\n|\nA\n|\nB\n|\nC\n|\nD\n|\nE\n|\nF\n|\nG\n|\nH\n|\nI\n|\nJ\n|\nK\n|\nL\n|\nM\n|\nN\n|\nO\n|\nP\n|\nQ\n|\nR\n|\nS\n|\nT\n|\nU\n|\nV\n|\nW\n|\nX\n|\nY\n|\nZ\nFull index on one page\n(can be huge)",
      "section": null,
      "subsection": null,
      "api_endpoints": [],
      "code_examples": [],
      "last_updated": null,
      "tags": [],
      "scraped_at": "2025-07-25 12:46:50"
    },
    {
      "url": "https://docs.python.org/c-api/index.html",
      "title": "Python/C API Reference Manual\u00b6",
      "content": "Python/C API Reference Manual\n\u00b6\nThis manual documents the API used by C and C++ programmers who want to write\nextension modules or embed Python.  It is a companion to\nExtending and Embedding the Python Interpreter\n,\nwhich describes the general principles of extension writing but does not\ndocument the API functions in detail.\nIntroduction\nCoding standards\nInclude Files\nUseful macros\nObjects, Types and Reference Counts\nExceptions\nEmbedding Python\nDebugging Builds\nRecommended third party tools\nC API Stability\nUnstable C API\nStable Application Binary Interface\nPlatform Considerations\nContents of Limited API\nThe Very High Level Layer\nReference Counting\nException Handling\nPrinting and clearing\nRaising exceptions\nIssuing warnings\nQuerying the error indicator\nSignal Handling\nException Classes\nException Objects\nUnicode Exception Objects\nRecursion Control\nException and warning types\nUtilities\nOperating System Utilities\nSystem Functions\nProcess Control\nImporting Modules\nData marshalling support\nParsing arguments and building values\nString conversion and formatting\nPyHash API\nReflection\nCodec registry and support functions\nPyTime C API\nSupport for Perf Maps\nAbstract Objects Layer\nObject Protocol\nCall Protocol\nNumber Protocol\nSequence Protocol\nMapping Protocol\nIterator Protocol\nBuffer Protocol\nConcrete Objects Layer\nFundamental Objects\nNumeric Objects\nSequence Objects\nContainer Objects\nFunction Objects\nOther Objects\nInitialization, Finalization, and Threads\nBefore Python Initialization\nGlobal configuration variables\nInitializing and finalizing the interpreter\nProcess-wide parameters\nThread State and the Global Interpreter Lock\nSub-interpreter support\nAsynchronous Notifications\nProfiling and Tracing\nReference tracing\nAdvanced Debugger Support\nThread Local Storage Support\nSynchronization Primitives\nPython Initialization Configuration\nExample\nPyWideStringList\nPyStatus\nPyPreConfig\nPreinitialize Python with PyPreConfig\nPyConfig\nInitialization with PyConfig\nIsolated Configuration\nPython Configuration\nPython Path Configuration\nPy_GetArgcArgv()\nMulti-Phase Initialization Private Provisional API\nMemory Management\nOverview\nAllocator Domains\nRaw Memory Interface\nMemory Interface\nObject allocators\nDefault Memory Allocators\nCustomize Memory Allocators\nDebug hooks on the Python memory allocators\nThe pymalloc allocator\nThe mimalloc allocator\ntracemalloc C API\nExamples\nObject Implementation Support\nAllocating Objects on the Heap\nCommon Object Structures\nType Object Structures\nSupporting Cyclic Garbage Collection\nAPI and ABI Versioning\nMonitoring C API\nGenerating Execution Events\nManaging the Monitoring State",
      "section": "C Api",
      "subsection": null,
      "api_endpoints": [],
      "code_examples": [],
      "last_updated": null,
      "tags": [
        "api",
        "reference",
        "installation",
        "backend"
      ],
      "scraped_at": "2025-07-25 12:46:51"
    },
    {
      "url": "https://docs.python.org/whatsnew/index.html",
      "title": "What\u2019s New in Python\u00b6",
      "content": "What\u2019s New in Python\n\u00b6\nThe \u201cWhat\u2019s New in Python\u201d series of essays takes tours through the most\nimportant changes between major Python versions.  They are a \u201cmust read\u201d for\nanyone wishing to stay up-to-date after a new release.\nWhat\u2019s New In Python 3.13\nSummary \u2013 Release Highlights\nNew Features\nOther Language Changes\nNew Modules\nImproved Modules\nOptimizations\nRemoved Modules And APIs\nNew Deprecations\nCPython Bytecode Changes\nC API Changes\nBuild Changes\nPorting to Python 3.13\nRegression Test Changes\nNotable changes in 3.13.1\nNotable changes in 3.13.4\nWhat\u2019s New In Python 3.12\nSummary \u2013 Release highlights\nNew Features\nNew Features Related to Type Hints\nOther Language Changes\nNew Modules\nImproved Modules\nOptimizations\nCPython bytecode changes\nDemos and Tools\nDeprecated\nRemoved\nPorting to Python 3.12\nBuild Changes\nC API Changes\nWhat\u2019s New In Python 3.11\nSummary \u2013 Release highlights\nNew Features\nNew Features Related to Type Hints\nOther Language Changes\nOther CPython Implementation Changes\nNew Modules\nImproved Modules\nOptimizations\nFaster CPython\nCPython bytecode changes\nDeprecated\nPending Removal in Python 3.12\nRemoved\nPorting to Python 3.11\nBuild Changes\nC API Changes\nNotable changes in 3.11.4\nNotable changes in 3.11.5\nWhat\u2019s New In Python 3.10\nSummary \u2013 Release highlights\nNew Features\nNew Features Related to Type Hints\nOther Language Changes\nNew Modules\nImproved Modules\nOptimizations\nDeprecated\nRemoved\nPorting to Python 3.10\nCPython bytecode changes\nBuild Changes\nC API Changes\nNotable security feature in 3.10.7\nNotable security feature in 3.10.8\nNotable changes in 3.10.12\nWhat\u2019s New In Python 3.9\nSummary \u2013 Release highlights\nYou should check for DeprecationWarning in your code\nNew Features\nOther Language Changes\nNew Modules\nImproved Modules\nOptimizations\nDeprecated\nRemoved\nPorting to Python 3.9\nBuild Changes\nC API Changes\nNotable changes in Python 3.9.1\nNotable changes in Python 3.9.2\nNotable changes in Python 3.9.3\nNotable changes in Python 3.9.5\nNotable security feature in 3.9.14\nNotable changes in 3.9.17\nWhat\u2019s New In Python 3.8\nSummary \u2013 Release highlights\nNew Features\nOther Language Changes\nNew Modules\nImproved Modules\nOptimizations\nBuild and C API Changes\nDeprecated\nAPI and Feature Removals\nPorting to Python 3.8\nNotable changes in Python 3.8.1\nNotable changes in Python 3.8.2\nNotable changes in Python 3.8.3\nNotable changes in Python 3.8.8\nNotable changes in Python 3.8.9\nNotable changes in Python 3.8.10\nNotable changes in Python 3.8.10\nNotable changes in Python 3.8.12\nNotable security feature in 3.8.14\nNotable changes in 3.8.17\nWhat\u2019s New In Python 3.7\nSummary \u2013 Release Highlights\nNew Features\nOther Language Changes\nNew Modules\nImproved Modules\nC API Changes\nBuild Changes\nOptimizations\nOther CPython Implementation Changes\nDeprecated Python Behavior\nDeprecated Python modules, functions and methods\nDeprecated functions and types of the C API\nPlatform Support Removals\nAPI and Feature Removals\nModule Removals\nWindows-only Changes\nPorting to Python 3.7\nNotable changes in Python 3.7.1\nNotable changes in Python 3.7.2\nNotable changes in Python 3.7.6\nNotable changes in Python 3.7.10\nNotable changes in Python 3.7.11\nNotable security feature in 3.7.14\nWhat\u2019s New In Python 3.6\nSummary \u2013 Release highlights\nNew Features\nOther Language Changes\nNew Modules\nImproved Modules\nOptimizations\nBuild and C API Changes\nOther Improvements\nDeprecated\nRemoved\nPorting to Python 3.6\nNotable changes in Python 3.6.2\nNotable changes in Python 3.6.4\nNotable changes in Python 3.6.5\nNotable changes in Python 3.6.7\nNotable changes in Python 3.6.10\nNotable changes in Python 3.6.13\nNotable changes in Python 3.6.14\nWhat\u2019s New In Python 3.5\nSummary \u2013 Release highlights\nNew Features\nOther Language Changes\nNew Modules\nImproved Modules\nOther module-level changes\nOptimizations\nBuild and C API Changes\nDeprecated\nRemoved\nPorting to Python 3.5\nNotable changes in Python 3.5.4\nWhat\u2019s New In Python 3.4\nSummary \u2013 Release Highlights\nNew Features\nNew Modules\nImproved Modules\nCPython Implementation Changes\nDeprecated\nRemoved\nPorting to Python 3.4\nChanged in 3.4.3\nWhat\u2019s New In Python 3.3\nSummary \u2013 Release highlights\nPEP 405: Virtual Environments\nPEP 420: Implicit Namespace Packages\nPEP 3118: New memoryview implementation and buffer protocol documentation\nPEP 393: Flexible String Representation\nPEP 397: Python Launcher for Windows\nPEP 3151: Reworking the OS and IO exception hierarchy\nPEP 380: Syntax for Delegating to a Subgenerator\nPEP 409: Suppressing exception context\nPEP 414: Explicit Unicode literals\nPEP 3155: Qualified name for classes and functions\nPEP 412: Key-Sharing Dictionary\nPEP 362: Function Signature Object\nPEP 421: Adding sys.implementation\nUsing importlib as the Implementation of Import\nOther Language Changes\nA Finer-Grained Import Lock\nBuiltin functions and types\nNew Modules\nImproved Modules\nOptimizations\nBuild and C API Changes\nDeprecated\nPorting to Python 3.3\nWhat\u2019s New In Python 3.2\nPEP 384: Defining a Stable ABI\nPEP 389: Argparse Command Line Parsing Module\nPEP 391:  Dictionary Based Configuration for Logging\nPEP 3148:  The\nconcurrent.futures\nmodule\nPEP 3147:  PYC Repository Directories\nPEP 3149: ABI Version Tagged .so Files\nPEP 3333: Python Web Server Gateway Interface v1.0.1\nOther Language Changes\nNew, Improved, and Deprecated Modules\nMulti-threading\nOptimizations\nUnicode\nCodecs\nDocumentation\nIDLE\nCode Repository\nBuild and C API Changes\nPorting to Python 3.2\nWhat\u2019s New In Python 3.1\nPEP 372: Ordered Dictionaries\nPEP 378: Format Specifier for Thousands Separator\nOther Language Changes\nNew, Improved, and Deprecated Modules\nOptimizations\nIDLE\nBuild and C API Changes\nPorting to Python 3.1\nWhat\u2019s New In Python 3.0\nCommon Stumbling Blocks\nOverview Of Syntax Changes\nChanges Already Present In Python 2.6\nLibrary Changes\nPEP 3101\n: A New Approach To String Formatting\nChanges To Exceptions\nMiscellaneous Other Changes\nBuild and C API Changes\nPerformance\nPorting To Python 3.0\nWhat\u2019s New in Python 2.7\nThe Future for Python 2.x\nChanges to the Handling of Deprecation Warnings\nPython 3.1 Features\nPEP 372: Adding an Ordered Dictionary to collections\nPEP 378: Format Specifier for Thousands Separator\nPEP 389: The argparse Module for Parsing Command Lines\nPEP 391: Dictionary-Based Configuration For Logging\nPEP 3106: Dictionary Views\nPEP 3137: The memoryview Object\nOther Language Changes\nNew and Improved Modules\nBuild and C API Changes\nOther Changes and Fixes\nPorting to Python 2.7\nNew Features Added to Python 2.7 Maintenance Releases\nAcknowledgements\nWhat\u2019s New in Python 2.6\nPython 3.0\nChanges to the Development Process\nPEP 343: The \u2018with\u2019 statement\nPEP 366: Explicit Relative Imports From a Main Module\nPEP 370: Per-user\nsite-packages\nDirectory\nPEP 371: The\nmultiprocessing\nPackage\nPEP 3101: Advanced String Formatting\nPEP 3105:\nprint\nAs a Function\nPEP 3110: Exception-Handling Changes\nPEP 3112: Byte Literals\nPEP 3116: New I/O Library\nPEP 3118: Revised Buffer Protocol\nPEP 3119: Abstract Base Classes\nPEP 3127: Integer Literal Support and Syntax\nPEP 3129: Class Decorators\nPEP 3141: A Type Hierarchy for Numbers\nOther Language Changes\nNew and Improved Modules\nDeprecations and Removals\nBuild and C API Changes\nPorting to Python 2.6\nAcknowledgements\nWhat\u2019s New in Python 2.5\nPEP 308: Conditional Expressions\nPEP 309: Partial Function Application\nPEP 314: Metadata for Python Software Packages v1.1\nPEP 328: Absolute and Relative Imports\nPEP 338: Executing Modules as Scripts\nPEP 341: Unified try/except/finally\nPEP 342: New Generator Features\nPEP 343: The \u2018with\u2019 statement\nPEP 352: Exceptions as New-Style Classes\nPEP 353: Using ssize_t as the index type\nPEP 357: The \u2018__index__\u2019 method\nOther Language Changes\nNew, Improved, and Removed Modules\nBuild and C API Changes\nPorting to Python 2.5\nAcknowledgements\nWhat\u2019s New in Python 2.4\nPEP 218: Built-In Set Objects\nPEP 237: Unifying Long Integers and Integers\nPEP 289: Generator Expressions\nPEP 292: Simpler String Substitutions\nPEP 318: Decorators for Functions and Methods\nPEP 322: Reverse Iteration\nPEP 324: New subprocess Module\nPEP 327: Decimal Data Type\nPEP 328: Multi-line Imports\nPEP 331: Locale-Independent Float/String Conversions\nOther Language Changes\nNew, Improved, and Deprecated Modules\nBuild and C API Changes\nPorting to Python 2.4\nAcknowledgements\nWhat\u2019s New in Python 2.3\nPEP 218: A Standard Set Datatype\nPEP 255: Simple Generators\nPEP 263: Source Code Encodings\nPEP 273: Importing Modules from ZIP Archives\nPEP 277: Unicode file name support for Windows NT\nPEP 278: Universal Newline Support\nPEP 279: enumerate()\nPEP 282: The logging Package\nPEP 285: A Boolean Type\nPEP 293: Codec Error Handling Callbacks\nPEP 301: Package Index and Metadata for Distutils\nPEP 302: New Import Hooks\nPEP 305: Comma-separated Files\nPEP 307: Pickle Enhancements\nExtended Slices\nOther Language Changes\nNew, Improved, and Deprecated Modules\nPymalloc: A Specialized Object Allocator\nBuild and C API Changes\nOther Changes and Fixes\nPorting to Python 2.3\nAcknowledgements\nWhat\u2019s New in Python 2.2\nIntroduction\nPEPs 252 and 253: Type and Class Changes\nPEP 234: Iterators\nPEP 255: Simple Generators\nPEP 237: Unifying Long Integers and Integers\nPEP 238: Changing the Division Operator\nUnicode Changes\nPEP 227: Nested Scopes\nNew and Improved Modules\nInterpreter Changes and Fixes\nOther Changes and Fixes\nAcknowledgements\nWhat\u2019s New in Python 2.1\nIntroduction\nPEP 227: Nested Scopes\nPEP 236: __future__ Directives\nPEP 207: Rich Comparisons\nPEP 230: Warning Framework\nPEP 229: New Build System\nPEP 205: Weak References\nPEP 232: Function Attributes\nPEP 235: Importing Modules on Case-Insensitive Platforms\nPEP 217: Interactive Display Hook\nPEP 208: New Coercion Model\nPEP 241: Metadata in Python Packages\nNew and Improved Modules\nOther Changes and Fixes\nAcknowledgements\nWhat\u2019s New in Python 2.0\nIntroduction\nWhat About Python 1.6?\nNew Development Process\nUnicode\nList Comprehensions\nAugmented Assignment\nString Methods\nGarbage Collection of Cycles\nOther Core Changes\nPorting to 2.0\nExtending/Embedding Changes\nDistutils: Making Modules Easy to Install\nXML Modules\nModule changes\nNew modules\nIDLE Improvements\nDeleted and Deprecated Modules\nAcknowledgements\nThe \u201cChangelog\u201d is an HTML version of the\nfile built\nfrom the contents of the\nMisc/NEWS.d\ndirectory tree, which contains\nall\nnontrivial changes\nto Python for the current version.\nChangelog\nPython next\nPython 3.13.5 final\nPython 3.13.4 final\nPython 3.13.3 final\nPython 3.13.2 final\nPython 3.13.1 final\nPython 3.13.0 final\nPython 3.13.0 release candidate 3\nPython 3.13.0 release candidate 2\nPython 3.13.0 release candidate 1\nPython 3.13.0 beta 4\nPython 3.13.0 beta 3\nPython 3.13.0 beta 2\nPython 3.13.0 beta 1\nPython 3.13.0 alpha 6\nPython 3.13.0 alpha 5\nPython 3.13.0 alpha 4\nPython 3.13.0 alpha 3\nPython 3.13.0 alpha 2\nPython 3.13.0 alpha 1\nPython 3.12.0 beta 1\nPython 3.12.0 alpha 7\nPython 3.12.0 alpha 6\nPython 3.12.0 alpha 5\nPython 3.12.0 alpha 4\nPython 3.12.0 alpha 3\nPython 3.12.0 alpha 2\nPython 3.12.0 alpha 1\nPython 3.11.0 beta 1\nPython 3.11.0 alpha 7\nPython 3.11.0 alpha 6\nPython 3.11.0 alpha 5\nPython 3.11.0 alpha 4\nPython 3.11.0 alpha 3\nPython 3.11.0 alpha 2\nPython 3.11.0 alpha 1\nPython 3.10.0 beta 1\nPython 3.10.0 alpha 7\nPython 3.10.0 alpha 6\nPython 3.10.0 alpha 5\nPython 3.10.0 alpha 4\nPython 3.10.0 alpha 3\nPython 3.10.0 alpha 2\nPython 3.10.0 alpha 1\nPython 3.9.0 beta 1\nPython 3.9.0 alpha 6\nPython 3.9.0 alpha 5\nPython 3.9.0 alpha 4\nPython 3.9.0 alpha 3\nPython 3.9.0 alpha 2\nPython 3.9.0 alpha 1\nPython 3.8.0 beta 1\nPython 3.8.0 alpha 4\nPython 3.8.0 alpha 3\nPython 3.8.0 alpha 2\nPython 3.8.0 alpha 1\nPython 3.7.0 final\nPython 3.7.0 release candidate 1\nPython 3.7.0 beta 5\nPython 3.7.0 beta 4\nPython 3.7.0 beta 3\nPython 3.7.0 beta 2\nPython 3.7.0 beta 1\nPython 3.7.0 alpha 4\nPython 3.7.0 alpha 3\nPython 3.7.0 alpha 2\nPython 3.7.0 alpha 1\nPython 3.6.6 final\nPython 3.6.6 release candidate 1\nPython 3.6.5 final\nPython 3.6.5 release candidate 1\nPython 3.6.4 final\nPython 3.6.4 release candidate 1\nPython 3.6.3 final\nPython 3.6.3 release candidate 1\nPython 3.6.2 final\nPython 3.6.2 release candidate 2\nPython 3.6.2 release candidate 1\nPython 3.6.1 final\nPython 3.6.1 release candidate 1\nPython 3.6.0 final\nPython 3.6.0 release candidate 2\nPython 3.6.0 release candidate 1\nPython 3.6.0 beta 4\nPython 3.6.0 beta 3\nPython 3.6.0 beta 2\nPython 3.6.0 beta 1\nPython 3.6.0 alpha 4\nPython 3.6.0 alpha 3\nPython 3.6.0 alpha 2\nPython 3.6.0 alpha 1\nPython 3.5.5 final\nPython 3.5.5 release candidate 1\nPython 3.5.4 final\nPython 3.5.4 release candidate 1\nPython 3.5.3 final\nPython 3.5.3 release candidate 1\nPython 3.5.2 final\nPython 3.5.2 release candidate 1\nPython 3.5.1 final\nPython 3.5.1 release candidate 1\nPython 3.5.0 final\nPython 3.5.0 release candidate 4\nPython 3.5.0 release candidate 3\nPython 3.5.0 release candidate 2\nPython 3.5.0 release candidate 1\nPython 3.5.0 beta 4\nPython 3.5.0 beta 3\nPython 3.5.0 beta 2\nPython 3.5.0 beta 1\nPython 3.5.0 alpha 4\nPython 3.5.0 alpha 3\nPython 3.5.0 alpha 2\nPython 3.5.0 alpha 1",
      "section": "Whatsnew",
      "subsection": null,
      "api_endpoints": [],
      "code_examples": [],
      "last_updated": null,
      "tags": [
        "api",
        "reference",
        "installation",
        "authentication",
        "backend"
      ],
      "scraped_at": "2025-07-25 12:46:53"
    },
    {
      "url": "https://docs.python.org/faq/index.html",
      "title": "Python Frequently Asked Questions\u00b6",
      "content": "Python Frequently Asked Questions\n\u00b6\nGeneral Python FAQ\nProgramming FAQ\nDesign and History FAQ\nLibrary and Extension FAQ\nExtending/Embedding FAQ\nPython on Windows FAQ\nGraphic User Interface FAQ\n\u201cWhy is Python Installed on my Computer?\u201d FAQ",
      "section": "Faq",
      "subsection": null,
      "api_endpoints": [],
      "code_examples": [],
      "last_updated": null,
      "tags": [
        "backend"
      ],
      "scraped_at": "2025-07-25 12:46:54"
    },
    {
      "url": "https://docs.python.org/reference/index.html",
      "title": "The Python Language Reference\u00b6",
      "content": "The Python Language Reference\n\u00b6\nThis reference manual describes the syntax and \u201ccore semantics\u201d of the\nlanguage. It is terse, but attempts to be exact and complete. The semantics of\nnon-essential built-in object types and of the built-in functions and modules\nare described in\nThe Python Standard Library\n. For an informal introduction to the\nlanguage, see\nThe Python Tutorial\n. For C or C++ programmers, two additional\nmanuals exist:\nExtending and Embedding the Python Interpreter\ndescribes the high-level picture of how to\nwrite a Python extension module, and the\nPython/C API Reference Manual\ndescribes the\ninterfaces available to C/C++ programmers in detail.\n1. Introduction\n1.1. Alternate Implementations\n1.2. Notation\n2. Lexical analysis\n2.1. Line structure\n2.2. Other tokens\n2.3. Identifiers and keywords\n2.4. Literals\n2.5. Operators\n2.6. Delimiters\n3. Data model\n3.1. Objects, values and types\n3.2. The standard type hierarchy\n3.3. Special method names\n3.4. Coroutines\n4. Execution model\n4.1. Structure of a program\n4.2. Naming and binding\n4.3. Exceptions\n5. The import system\n5.1.\nimportlib\n5.2. Packages\n5.3. Searching\n5.4. Loading\n5.5. The Path Based Finder\n5.6. Replacing the standard import system\n5.7. Package Relative Imports\n5.8. Special considerations for __main__\n5.9. References\n6. Expressions\n6.1. Arithmetic conversions\n6.2. Atoms\n6.3. Primaries\n6.4. Await expression\n6.5. The power operator\n6.6. Unary arithmetic and bitwise operations\n6.7. Binary arithmetic operations\n6.8. Shifting operations\n6.9. Binary bitwise operations\n6.10. Comparisons\n6.11. Boolean operations\n6.12. Assignment expressions\n6.13. Conditional expressions\n6.14. Lambdas\n6.15. Expression lists\n6.16. Evaluation order\n6.17. Operator precedence\n7. Simple statements\n7.1. Expression statements\n7.2. Assignment statements\n7.3. The\nassert\nstatement\n7.4. The\npass\nstatement\n7.5. The\ndel\nstatement\n7.6. The\nreturn\nstatement\n7.7. The\nyield\nstatement\n7.8. The\nraise\nstatement\n7.9. The\nbreak\nstatement\n7.10. The\ncontinue\nstatement\n7.11. The\nimport\nstatement\n7.12. The\nglobal\nstatement\n7.13. The\nnonlocal\nstatement\n7.14. The\ntype\nstatement\n8. Compound statements\n8.1. The\nif\nstatement\n8.2. The\nwhile\nstatement\n8.3. The\nfor\nstatement\n8.4. The\ntry\nstatement\n8.5. The\nwith\nstatement\n8.6. The\nmatch\nstatement\n8.7. Function definitions\n8.8. Class definitions\n8.9. Coroutines\n8.10. Type parameter lists\n9. Top-level components\n9.1. Complete Python programs\n9.2. File input\n9.3. Interactive input\n9.4. Expression input\n10. Full Grammar specification",
      "section": "Reference",
      "subsection": null,
      "api_endpoints": [],
      "code_examples": [],
      "last_updated": null,
      "tags": [
        "api",
        "tutorial",
        "reference",
        "backend"
      ],
      "scraped_at": "2025-07-25 12:46:57"
    }
  ]
}